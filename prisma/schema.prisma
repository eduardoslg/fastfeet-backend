// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DELIVERYMAN
}

model User {
  id       String  @id @default(uuid())
  name     String  @db.VarChar(150)
  email    String  @unique @db.VarChar(120)
  password String  @default(uuid())
  active   Boolean @default(true)
  cpf      String  @unique @db.VarChar(11)

  addressId String? @map("address_id")

  role Role @default(DELIVERYMAN)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  address Address? @relation(fields: [addressId], references: [id])

  @@map("users")
}

enum Status {
  WAITING
  RETIRED
  DELIVERED
  RETURNED
}

model Order {
  id String @id @default(uuid())

  recipientId String @map("recipient_id")

  postedAt    DateTime? @map("posted_at")
  retiredAt   DateTime? @map("retired_at")
  deliveredAt DateTime? @map("delivered_at")

  status Status @default(WAITING)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  recipient Recipient @relation(fields: [recipientId], references: [id])

  @@map("orders")
}

model Recipient {
  id String @id @default(uuid())

  name      String
  addressId String @map("address_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  order Order[]

  @@map("recipients")
}

model Address {
  id String @id @default(uuid())

  address      String  @db.VarChar(50)
  number       Int?
  neighborhood String  @db.VarChar(30)
  city         String  @db.VarChar(30)
  state        String  @db.Char(2)
  zipCode      Int     @map("zip_code")
  complement   String? @db.VarChar(30)
  description  String? @db.VarChar(150)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User[]

  @@map("addresses")
}
